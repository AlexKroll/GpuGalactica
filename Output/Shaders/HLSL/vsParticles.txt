
#include "vsCamera.txt"
#include "ParticleEmitters/Math.txt"
#include "ParticleEmitters/Particle.txt"
#include "ParticleEmitters/Emitter.txt"

StructuredBuffer<Particle> particles : register(t0);





void Main(in float4 VertexPos: POSITION, in float2 VertexTexCrd: TEXCOORD0, in uint ind: SV_InstanceID,
			out float4 OutPos: SV_Position, out float2 TexCoord: TEXCOORD0, out float4 OutColor: COLOR0)
{
#ifdef PARTICLE_MWORLD
	float3 Pos = mul( float4(particles[ind].pos.xyz, 1), mWorld );
#else
	float3 Pos = particles[ind].pos.xyz;
#endif

	Pos = mul( float4(Pos, 1), mView );

	Pos.xy += VertexPos.xy * particles[ind].pos.ww;

	OutPos = mul( float4(Pos,1), mProj );

	TexCoord.y = VertexTexCrd.y;

	float tex_add_u = GetFloat01FromHighHalf(particles[ind].rand_texu_add);
	TexCoord.x = VertexTexCrd.x * UvMulX + tex_add_u;

	float fact = particles[ind].factor01;

#ifdef PARTICLE_PROC_ALPHA
	float alpha = ( fact < AFadeInOut ) ? fact * AFadeIn : AFadeOutMax + fact * AFadeOut;
	alpha = saturate(alpha);
	OutColor.a = alpha;
#else
	OutColor.a = Color.a;
#endif


#ifdef PARTICLE_PROC_COLOR
	OutColor.rgb = lerp(Color1, Color2, fact);
	if( fact < 0.02 )
		OutColor.rgb *= 0.5;
#else
	OutColor.rgb = Color.rgb;
#endif


#ifdef PARTICLE_COLOR_MUL_ALPHA
	OutColor.rgb *= alpha;
#endif
}